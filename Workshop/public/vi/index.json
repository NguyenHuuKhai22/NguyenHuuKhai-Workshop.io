[
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Amazon S3 (Simple Storage Service) là dịch vụ lưu trữ đối tượng (object storage) do Amazon Web Services (AWS) cung cấp, giúp người dùng lưu trữ và truy xuất dữ liệu một cách linh hoạt, bảo mật và có khả năng mở rộng gần như không giới hạn. Trong S3, dữ liệu được lưu trữ dưới dạng \u0026ldquo;object\u0026rdquo; trong các \u0026ldquo;bucket\u0026rdquo;. Mỗi bucket là một vùng chứa dữ liệu, nơi bạn có thể tải lên các tệp tin như hình ảnh, video, tài liệu, hoặc bất kỳ loại dữ liệu nào khác. Mỗi object bao gồm dữ liệu, metadata, và một khóa định danh duy nhất.\nVới việc sử dụng Amazon S3, bạn sẽ có được những đặc điểm nổi bật như sau:\nLưu trữ không giới hạn có thể lưu hàng triệu đối tượng lên tới petabye. Độ bền và khả dụng cao: Dữ liệu được lưu trữ với độ bền 99.999999999% (11 số 9) và được sao lưu trên nhiều vùng Availability Zones. Có thể truy cập dễ dàng qua API: Hỗ trợ truy cập thông qua RESTful API, SDK hoặc AWS CLI. Ngoài ra có còn bảo mật mạnh mẽ, hỗ trợ mã hóa dữ liệu và kiểm soát truy cập qua IAM. Truy cập tới server một cách dễ dàng và đơn giản bằng một cú click chuột. Tích hợp tốt với các dịch vụ AWS khác: Ví dụ như CloudFront (CDN), Lambda (serverless processing), hoặc S3 Event Notification. Với những ưu điểm vượt trội này, Amazon S3 trở thành lựa chọn lý tưởng cho việc lưu trữ hình ảnh, video, bản ghi dữ liệu, sao lưu và nhiều loại dữ liệu khác trong các hệ thống web và ứng dụng hiện đại.\n"
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/",
	"title": "Tải tệp lên Amazon S3 Bucket bằng PHP Laravel",
	"tags": [],
	"description": "",
	"content": "Dự án AWS: Tải tệp lên Amazon S3 Bucket bằng PHP Laravel Tổng quan Trong bài lab này, chúng ta sẽ tìm hiểu cách tải tệp lên Amazon S3 Bucket bằng Laravel. Đây là một tác vụ phổ biến trong các ứng dụng web hiện đại, giúp lưu trữ dữ liệu một cách linh hoạt, bảo mật và dễ mở rộng trên nền tảng đám mây.\nLaravel là một framework PHP mạnh mẽ và thân thiện với lập trình viên, cung cấp các công cụ tích hợp sẵn giúp việc làm việc với Amazon S3 trở nên đơn giản hơn thông qua hệ thống filesystem và thư viện Flysystem. Trong bài học này, bạn sẽ được hướng dẫn cách cấu hình kết nối với S3, xử lý logic tải tệp lên cloud, cũng như áp dụng các phương pháp bảo mật để đảm bảo an toàn dữ liệu.\nBên cạnh đó, chúng ta cũng sẽ tìm hiểu cách triển khai các thành phần hỗ trợ mở rộng hệ thống như Auto Scaling Group để tăng khả năng đáp ứng khi có nhiều người dùng truy cập, và Load Balancer để phân phối lưu lượng truy cập đều đến các máy chủ ứng dụng.\nHãy đảm bảo rằng bạn đã nắm được các kiến thức cơ bản về Laravel, AWS và quy trình làm việc với hệ thống tệp từ xa trước khi bắt đầu triển khai.\nNội dung Giới thiệu Các bước chuẩn bị Thêm Accect key, Secret key, Region vàovào Environment Variables Khởi tạo dự án Kiểm tra S3 Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/2-preparation/2.1-create-iam-user/",
	"title": "Tạo IAM User",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ cần một IAM User có khả năng truy cập vào S3 bucket để tải lên, lấy và xóa hình ảnh trong bucket\nĐến trang Identity and Access Management (IAM) bằng cách: Nhấp vào tên tài khoản ở góc trên bên phải và chọn My Security Credentials Hoặc nhập IAM vào thanh tìm kiếm dịch vụ và chọn ‘IAM’ Trong giao diện IAM Từ ngăn bên trái của bảng điều khiển IAM, chọn Users rồi nhấp vào nút Create User. Trong phần Specify user details Bạn có thể tự đặt tên khác theo ý của các bạn nhé!\nNhập user name sau đó chọn Provide user access to the AWS Management Console - optional Tiếp đến chọn I want to create an IAM user Bước tiếp theo kéo xuống cuối trang có thể chọn Autogenerated password hoặc Custom password ở đây chọn Custom password và Next Tiếp theo trong Set permissions chọn Attach policies directly Trong Permissions policies tìm kiếm và chọn AdministratorAccess và AmazonS3FullAccess cuối cùng nhấn Next Xem lại thông tin IAM User và nhấn vào nút Create User. Tại đây bạn chọn Download .csv file và Return to users list "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/4-initializeproject/4.1-create-laravel/",
	"title": "Tạo Laravel",
	"tags": [],
	"description": "",
	"content": "Đầu tiên chúng ta sẽ khởi tạo một Project Laravel bằng lệnh\nMở Visual Studio lên chọn Open Folder mới tạo Dùng lệnh composer create-project laravel/laravel s3upload để khởi tạo Project Laravel Đợi 1-2 phút khởi tạo xong project rồi dùng lệnh cd s3upload để vào project. Cuối cùng cài đặt AWS SDK cho Laravel. Laravel sử dụng gói league/flysystem-aws-s3-v3 để hỗ trợ S3. Dùng lệnh composer require league/flysystem-aws-s3-v3 \u0026ldquo;^3.0\u0026rdquo; và đợi 1-2 phút để chạy xong. "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/2-preparation/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Nội dung chính Chuẩn bị IAM User Chuẩn bị Secret Key Chuẩn bị S3 Bucket "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/4-initializeproject/4.2-configure-source-code/",
	"title": "Cấu hình mã nguồn",
	"tags": [],
	"description": "",
	"content": " Truy cập vào config/filesystems.php để cấu hình S3 \u0026#39;s3\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;s3\u0026#39;, \u0026#39;key\u0026#39; =\u0026gt; env(\u0026#39;AWS_ACCESS_KEY_ID\u0026#39;), \u0026#39;secret\u0026#39; =\u0026gt; env(\u0026#39;AWS_SECRET_ACCESS_KEY\u0026#39;), \u0026#39;region\u0026#39; =\u0026gt; env(\u0026#39;AWS_DEFAULT_REGION\u0026#39;), \u0026#39;bucket\u0026#39; =\u0026gt; env(\u0026#39;AWS_BUCKET\u0026#39;), \u0026#39;url\u0026#39; =\u0026gt; env(\u0026#39;AWS_URL\u0026#39;), \u0026#39;endpoint\u0026#39; =\u0026gt; env(\u0026#39;AWS_ENDPOINT\u0026#39;), \u0026#39;use_path_style_endpoint\u0026#39; =\u0026gt; env(\u0026#39;AWS_USE_PATH_STYLE_ENDPOINT\u0026#39;, false), \u0026#39;throw\u0026#39; =\u0026gt; false, \u0026#39;report\u0026#39; =\u0026gt; false, ], Tạo Controller Upload File Dùng lệnh để tạo Controller php artisan make:controller FileUploadController Vào app\\Http\\Controller\\FileUploadController.php để thêm code Upload vào \u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Storage; class FileUploadController extends Controller { public function upload(Request $request) { $request-\u0026gt;validate([ \u0026#39;file\u0026#39; =\u0026gt; \u0026#39;required|file|max:10240\u0026#39;, // 10MB max ]); /** @var \\Illuminate\\Filesystem\\FilesystemAdapter $s3 */ $s3 = Storage::disk(\u0026#39;s3\u0026#39;); $path = Storage::disk(\u0026#39;s3\u0026#39;)-\u0026gt;put(\u0026#39;uploads\u0026#39;, $request-\u0026gt;file(\u0026#39;file\u0026#39;)); $url = $s3-\u0026gt;url($path); return response()-\u0026gt;json([ \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Upload successful\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; $url, ]); } } Thêm Route Thêm route vào routes/web.php. use App\\Http\\Controllers\\FileUploadController; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;upload\u0026#39;); // Giao diện đơn giản }); Route::post(\u0026#39;/upload\u0026#39;, [FileUploadController::class, \u0026#39;upload\u0026#39;]); "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/2-preparation/2.2-create-secret-key/",
	"title": "Tạo Secret key",
	"tags": [],
	"description": "",
	"content": "Tiếp theo từ IAM User bạn vừa tạo hãy tạo 1 secret key\nTừ ngăn bên trái của bảng điều khiển IAM, chọn Users rồi chọn user bạn vừa tạo. Tiếp theo trong Summary bạn chọn Create Accect Key\nTrong bước 1 Bạn chọn Local code Rồi tích vào Confirmation Sau chọn Next Trong bước 2 Có thể bỏ qua Description tag value Bạn chọn Create Accect Key Tại bước 3 Bạn chọn Download .csv file Rồi Done "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/4-initializeproject/4.3-create-frontend-source-code/",
	"title": "Tạo mã nguồn Frontend",
	"tags": [],
	"description": "",
	"content": "Dự án này gần hoàn thành, nhưng chúng ta cần một giao diện để nhận việc tải file lên, vì vậy hãy tạo một giao diện người dùng cho nó.\nĐầu tiên bạn cần truy cập vào resources/views Tạo upload.blade.php Để tạo giao diện người dùng, bạn có thể sử dụng front end source code của tôi hoặc có thể tự tạo code đẹp hơn\nThêm code giao diện người dùng vào upload.blade.php \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;csrf-token\u0026#34; content=\u0026#34;{{ csrf_token() }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Upload File to S3\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.tailwindcss.com\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-gray-100 flex items-center justify-center min-h-screen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-white shadow-lg rounded-xl p-8 w-full max-w-md text-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-2xl font-bold text-gray-800 mb-6\u0026#34;\u0026gt;Upload File to Amazon S3\u0026lt;/h2\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;fileInput\u0026#34; class=\u0026#34;w-full mb-4 p-2 border rounded-lg text-sm\u0026#34;\u0026gt; \u0026lt;button onclick=\u0026#34;uploadFile()\u0026#34; class=\u0026#34;w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200\u0026#34;\u0026gt; Upload \u0026lt;/button\u0026gt; \u0026lt;p id=\u0026#34;result\u0026#34; class=\u0026#34;mt-4 text-sm text-green-600 font-medium\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; async function uploadFile() { const input = document.getElementById(\u0026#39;fileInput\u0026#39;); const result = document.getElementById(\u0026#39;result\u0026#39;); if (input.files.length === 0) { result.innerText = \u0026#34;Please select a file first.\u0026#34;; result.classList.remove(\u0026#34;text-green-600\u0026#34;); result.classList.add(\u0026#34;text-red-600\u0026#34;); return; } const formData = new FormData(); formData.append(\u0026#34;file\u0026#34;, input.files[0]); try { const response = await fetch(\u0026#34;/upload\u0026#34;, { method: \u0026#34;POST\u0026#34;, headers: { \u0026#39;X-CSRF-TOKEN\u0026#39;: document.querySelector(\u0026#39;meta[name=\u0026#34;csrf-token\u0026#34;]\u0026#39;).content }, body: formData }); const data = await response.json(); if (data.url) { result.innerText = `✅ Uploaded to: ${data.url}`; result.classList.remove(\u0026#34;text-red-600\u0026#34;); result.classList.add(\u0026#34;text-green-600\u0026#34;); } else { result.innerText = \u0026#34;❌ Upload failed.\u0026#34;; result.classList.remove(\u0026#34;text-green-600\u0026#34;); result.classList.add(\u0026#34;text-red-600\u0026#34;); } } catch (error) { result.innerText = \u0026#34;❌ Error during upload.\u0026#34;; result.classList.remove(\u0026#34;text-green-600\u0026#34;); result.classList.add(\u0026#34;text-red-600\u0026#34;); } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2. Chạy Frontend Source và đây là kết quả:\n"
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/2-preparation/2.3-create-s3-bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Cuối cùng nhưng không kém phần quan trọng, chúng ta sẽ cần một S3 Bucket để lưu trữ dữ liệu hình ảnh. S3 Bucket là lựa chọn tuyệt vời để lưu trữ dữ liệu hình ảnh do khả năng mở rộng, độ bền và hiệu quả về chi phí.\nĐể điều hướng đến trang S3 bằng cách nhập S3 vào thanh tìm kiếm dịch vụ và chọn dịch vụ ‘S3’ Tại trang S3 Chọn Create Bucket để tạo S3 Bucket mới. Trong Create Bucket Bạn có thể tự đặt tên khác theo ý của các bạn nhé!\nLưu ý: Vì Bucket name là duy nhất trên mức độ toàn cầu, nếu sử dụng tên giống như trên sẽ xuất hiện thông báo: “Bucket with the same name already exists”. Do đó, cần thêm vài số phía sau để Bucket name của bạn phù hợp với policy. Mặc định Bucket type là General purpose Nhập tên Bucket name vào Sau chọn ACLs enabled Xem lại thông tin tạo S3 Bucket và nhấp vào Create Bucket. Xem S3 Bucket đã tạo. "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/3-addkey/",
	"title": "Thêm Accect key, Secret key, Region vào Environment Variables",
	"tags": [],
	"description": "",
	"content": "Thêm access key, secret key, và region của AWS S3 vào environment variables giúp bảo mật thông tin nhạy cảm, dễ dàng quản lý cấu hình và làm cho ứng dụng di động giữa các môi trường khác nhau mà không cần thay đổi mã nguồn.\nTruy cập biểu tượng Window và tìm kiếm environment variables. Chọn Edit environment variables for your account Tiếp theo bạn chọn Environment Variables. Trong bảng Environment Variables. Xem lại Access key ID và Secret access key trong file User_accessKeys.csv đã tải. Quay lại ở dưới phần System Variables chọn New. Nhập AWS_ACCESS_KEY_ID vào variable name và nhập key vừa nãy vào variable value sau đó nhấn OK. Tương tự bạn nhập AWS_SECRET_ACCESS_KEY vào variable name và nhập key vừa nãy vào variable value sau đó nhấn OK . Nhập cho AWS_BUCKET vào variable name và nhập key vừa nãy vào variable value sau đó nhấn OK. Lưu ý: variable value là tên Bucket của bạn. Tương tự vậy cũng điền cho AWS_DEFAULT_REGION mà bạn đang sử dụng sau đó nhấn OK. Lưu ý: điền Variable value cho region là region mà bạn tạo bucket s3 Cuối cùng nhấn OK để lưu lại. "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/4-initializeproject/",
	"title": "Khởi tạo dự án",
	"tags": [],
	"description": "",
	"content": "Tổng quan\nSau khi hoàn tất các bước thiết lập , chúng ta đã sẵn sàng cấu hình một project bằng Laravel để tải file lên S3 Bucket. Thông tin chi tiết về Laravel: Laravel Cài đặt Laravel, Composer: Laravel,Conposer Nội dung chính Tạo Laravel Cấu hình mã nguồn Tạo mã nguồn Frontend "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/5-verifys3connection/",
	"title": "Kiểm tra",
	"tags": [],
	"description": "",
	"content": "Tiếp theo chúng ta sẽ chạy thử project xem trang web đã hoạt động ổn định chưa.\nĐể chạy được project Laravel thì phải bật terminal lên. Nhấn tổ hợp phím Ctrl + ` để bật terminal lên nhanh.\nSau đó nhấn lệnh chạy php artisan serve\nCó thể truy cập web nhanh qua Ctrl + click trái chuột hoặc copy đường link http://127.0.0.1:8000/ paste vào trình duyệt.\nNếu như nó bị lỗi chạy không được thì bạn có thể cd vào s3upload rồi chạy lệnh lại. Có thể nó chưa vào thư mục code của mình nên chạy bị lỗi.\nSau khi vào web rồi bạn có thể chọn file bạn muốn tải lên và nhấn Upload. Truy cập vào S3 bucket của bạn để kiểm tra xem ảnh đã được tải lên chưa. Để có thể xem được ảnh bạn có thể truy cập vào Permissons Tại Block public access (bucket settings) bạn edit Và tiến hành bỏ tick Block all public access và Save changes rồi confirm Vào phần Bucket policy chọn edit rồi paste vào và Save changes\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::mybucket1222222111/*\u0026#34;\r}\r]\r} Thay mybucket1222222111 thành tên Bucket của bạn\nVào lại phần Object và vào Bucket của bạn nhấn vào file ảnh đã tải lên Vào Object URL để xem file ảnh đã tải Đây là hình ảnh đã tải "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Vào cuối buổi hội thảo này, chúng ta sẽ dọn dẹp tất cả các tài nguyên đã tạo ra!\nXóa S3 Bucket: Hãy thận trọng khi xóa bucket, vì nó cũng sẽ xóa tất cả các đối tượng được lưu trữ bên trong. Đảm bảo bạn có bản sao lưu nếu cần. Xác định vị trí S3 Bucket bạn đã tạo. Chọn Bucket bằng cách nhấp vào tên Bucket và chọn Delete. Nếu Bucket chứa các đối tượng, Bạn có thể nhấn vào nút Empty để dọn dẹp cái đối tượng đó. Điền permanently delete và Empty để xóa. Sau khi xóa các đối tượng sẽ như vầy. Và quay lại chọn Bucket và Delete các Bucket. Điền tên Bucket và Delete. 2. Xóa IAM User\nTruy cập vào IAM chọn tên user bạn muốn xóa. Nhấn deactivated Access key Nhấn Delete và xác nhận xóa. "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]