[
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Amazon S3 (Simple Storage Service) is an object storage service provided by Amazon Web Services (AWS), designed to help users store and retrieve data in a flexible, secure, and virtually unlimitedly scalable manner. In S3, data is stored as \u0026ldquo;objects\u0026rdquo; within \u0026ldquo;buckets\u0026rdquo;. Each bucket serves as a storage container where you can upload files such as images, videos, documents, or any other type of data. Every object consists of the data itself, metadata, and a unique identifier key.\nBy using Amazon S3, you gain access to the following key features:\nUnlimited storage: Capable of storing millions of objects up to petabytes in size. High durability and availability: Data is stored with 99.999999999% (11 nines) durability and is replicated across multiple Availability Zones. Easy access via API: Supports access through RESTful API, SDKs, or AWS CLI. Strong security: Offers robust encryption and access control through IAM. Quick and easy server access: Simplified access to stored data with minimal setup. Seamless integration with other AWS services: For example, CloudFront (CDN), Lambda (serverless processing), or S3 Event Notifications. Thanks to these outstanding advantages, Amazon S3 is an ideal choice for storing images, videos, logs, backups, and various types of data in modern web systems and applications.\n"
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/",
	"title": "Upload Files Amazon S3 Bucket by PHP Laravel",
	"tags": [],
	"description": "",
	"content": "Project AWS: Upload Files Amazon S3 Bucket by PHP Laravel Overall In this lab, we will learn how to upload a file to an Amazon S3 Bucket using Laravel. This is a common task in modern web applications, enabling flexible, secure, and scalable cloud-based data storage.\nLaravel is a powerful and user-friendly PHP framework that provides built-in tools to simplify working with Amazon S3 through its Filesystem system and the Flysystem library. In this lesson, you will learn how to configure the connection to S3, logically process files for cloud storage, and apply security measures to ensure data safety.\nAdditionally, we will explore how to deploy the system for scalability, such as using an Auto Scaling Group to enhance responsiveness under high traffic, and a Load Balancer to distribute traffic across application servers.\nMake sure you have a solid understanding of Laravel, AWS, and how to work with remote file systems before proceeding with deployment.\nContent Introduction Preparation Add Accect key, Secret key, Region to Environment Variables Create Project Test Cleaning Up "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/2-preparation/2.1-create-iam-user/",
	"title": "Create IAM User",
	"tags": [],
	"description": "",
	"content": "We will need an IAM User with the ability to access the S3 bucket to upload, retrieve, and delete images in the bucket\nGo to the Identity and Access Management (IAM) page by: Click on the account name in the upper right corner and select My Security Credentials Or type IAM into the service search bar and select ‘IAM’ In the IAM interface From the left pane of the IAM dashboard, select Users and click the Create User button. Bạn có thể tự đặt tên khác theo ý của các bạn nhé!\nIn the Specify user details section Enter the user name then select Provide user access to the AWS Management Console - optional\nNext select I want to create an IAM user Next step scroll down to the bottom of the page\nYou can choose Autogenerated password or Custom password\nHere choose Custom password and Next\nNext in Set permissions select Attach policies directly In Permissions policies search and select AdministratorAccess and AmazonS3FullAccess finally click Next Review the IAM User information and click the Create User button. Here you select Download .csv file and Return to users list "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/4-initializeproject/4.1-create-laravel/",
	"title": "Create Laravel",
	"tags": [],
	"description": "",
	"content": "First, we will initialize a Laravel Project using the command\nOpen Visual Studio and select Open Folder newly created Use the command composer create-project laravel/laravel s3upload to initialize the Laravel Project Wait 1-2 minutes to initialize the project and then use the command cd s3upload to enter the project. Finally, install AWS SDK for Laravel. Laravel uses the package league/flysystem-aws-s3-v3 to support S3.\nUse the command composer require league/flysystem-aws-s3-v3 \u0026ldquo;^3.0\u0026rdquo; and wait 1-2 minutes for it to finish.\n"
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/2-preparation/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "Content Create IAM User Create Secret Key Create S3 Bucket "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/2-preparation/2.2-create-secret-key/",
	"title": "Create Secret key",
	"tags": [],
	"description": "",
	"content": "Next from the IAM User you just created, create a secret key\nFrom the left pane of the IAM dashboard, select Users and then select the user you just created. Next in Summary you select Create Accect Key\nIn step 1 Select Local code Then tick Confirmation Then select Next In step 2 You can skip Description tag value You select Create Accect Key At step 3 Select Download .csv file Then Done "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/4-initializeproject/4.2-configure-source-code/",
	"title": "Source Code Configuration",
	"tags": [],
	"description": "",
	"content": " Access config/filesystems.php to configure S3 \u0026#39;s3\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;s3\u0026#39;, \u0026#39;key\u0026#39; =\u0026gt; env(\u0026#39;AWS_ACCESS_KEY_ID\u0026#39;), \u0026#39;secret\u0026#39; =\u0026gt; env(\u0026#39;AWS_SECRET_ACCESS_KEY\u0026#39;), \u0026#39;region\u0026#39; =\u0026gt; env(\u0026#39;AWS_DEFAULT_REGION\u0026#39;), \u0026#39;bucket\u0026#39; =\u0026gt; env(\u0026#39;AWS_BUCKET\u0026#39;), \u0026#39;url\u0026#39; =\u0026gt; env(\u0026#39;AWS_URL\u0026#39;), \u0026#39;endpoint\u0026#39; =\u0026gt; env(\u0026#39;AWS_ENDPOINT\u0026#39;), \u0026#39;use_path_style_endpoint\u0026#39; =\u0026gt; env(\u0026#39;AWS_USE_PATH_STYLE_ENDPOINT\u0026#39;, false), \u0026#39;throw\u0026#39; =\u0026gt; false, \u0026#39;report\u0026#39; =\u0026gt; false, ], Create Controller Upload File Use command to create Controller php artisan make:controller FileUploadController Go to app\\Http\\Controller\\FileUploadController.php to add Upload code \u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Storage; class FileUploadController extends Controller { public function upload(Request $request) { $request-\u0026gt;validate([ \u0026#39;file\u0026#39; =\u0026gt; \u0026#39;required|file|max:10240\u0026#39;, // 10MB max ]); /** @var \\Illuminate\\Filesystem\\FilesystemAdapter $s3 */ $s3 = Storage::disk(\u0026#39;s3\u0026#39;); $path = Storage::disk(\u0026#39;s3\u0026#39;)-\u0026gt;put(\u0026#39;uploads\u0026#39;, $request-\u0026gt;file(\u0026#39;file\u0026#39;)); $url = $s3-\u0026gt;url($path); return response()-\u0026gt;json([ \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Upload successful\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; $url, ]); } } Add Route Add routes to routes/web.php. use App\\Http\\Controllers\\FileUploadController; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;upload\u0026#39;); // Giao diện đơn giản }); Route::post(\u0026#39;/upload\u0026#39;, [FileUploadController::class, \u0026#39;upload\u0026#39;]); "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/3-addkey/",
	"title": "Add Accect key, Secret key, Region to Environment Variables",
	"tags": [],
	"description": "",
	"content": "Adding AWS S3 access key, secret key, and region to environment variables helps secure sensitive information, easily manage configurations, and make applications portable between different environments without changing the source code.\nGo to the Window icon and search for environment variables. Select Edit environment variables for your account Next, select Environment Variables. In the Environment Variables table. Review the Access key ID and Secret access key in the downloaded User_accessKeys.csv file. Go back to the System Variables section and select New. Enter AWS_ACCESS_KEY_ID into variable name and enter the previous key into variable value then press OK. Similarly, enter AWS_SECRET_ACCESS_KEY into variable name and enter the previous key into variable value then press OK . Enter AWS_BUCKET into variable name and enter the previous key into variable value then press OK.\nNote: variable value is your Bucket name.\nSimilarly, fill in AWS_DEFAULT_REGION that you are using then press OK.\nNote: fill in Variable value for the region that you created the s3 bucket Finally press OK to save. "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/4-initializeproject/4.3-create-frontend-source-code/",
	"title": "Create Frontend Source Code",
	"tags": [],
	"description": "",
	"content": "This project is almost done, but we need an interface to receive file uploads, so let\u0026rsquo;s create a UI for it.\nFirst you need to go to resources/views Create upload.blade.php To create the UI, you can use my front end source code or you can create your own nicer code\nAdd the UI code to upload.blade.php \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;csrf-token\u0026#34; content=\u0026#34;{{ csrf_token() }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Upload File to S3\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.tailwindcss.com\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-gray-100 flex items-center justify-center min-h-screen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-white shadow-lg rounded-xl p-8 w-full max-w-md text-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-2xl font-bold text-gray-800 mb-6\u0026#34;\u0026gt;Upload File to Amazon S3\u0026lt;/h2\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;fileInput\u0026#34; class=\u0026#34;w-full mb-4 p-2 border rounded-lg text-sm\u0026#34;\u0026gt; \u0026lt;button onclick=\u0026#34;uploadFile()\u0026#34; class=\u0026#34;w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200\u0026#34;\u0026gt; Upload \u0026lt;/button\u0026gt; \u0026lt;p id=\u0026#34;result\u0026#34; class=\u0026#34;mt-4 text-sm text-green-600 font-medium\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; async function uploadFile() { const input = document.getElementById(\u0026#39;fileInput\u0026#39;); const result = document.getElementById(\u0026#39;result\u0026#39;); if (input.files.length === 0) { result.innerText = \u0026#34;Please select a file first.\u0026#34;; result.classList.remove(\u0026#34;text-green-600\u0026#34;); result.classList.add(\u0026#34;text-red-600\u0026#34;); return; } const formData = new FormData(); formData.append(\u0026#34;file\u0026#34;, input.files[0]); try { const response = await fetch(\u0026#34;/upload\u0026#34;, { method: \u0026#34;POST\u0026#34;, headers: { \u0026#39;X-CSRF-TOKEN\u0026#39;: document.querySelector(\u0026#39;meta[name=\u0026#34;csrf-token\u0026#34;]\u0026#39;).content }, body: formData }); const data = await response.json(); if (data.url) { result.innerText = `✅ Uploaded to: ${data.url}`; result.classList.remove(\u0026#34;text-red-600\u0026#34;); result.classList.add(\u0026#34;text-green-600\u0026#34;); } else { result.innerText = \u0026#34;❌ Upload failed.\u0026#34;; result.classList.remove(\u0026#34;text-green-600\u0026#34;); result.classList.add(\u0026#34;text-red-600\u0026#34;); } } catch (error) { result.innerText = \u0026#34;❌ Error during upload.\u0026#34;; result.classList.remove(\u0026#34;text-green-600\u0026#34;); result.classList.add(\u0026#34;text-red-600\u0026#34;); } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2. Run Frontend Source and here is the result:\n"
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/2-preparation/2.3-create-s3-bucket/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Last but not least, we will need an S3 Bucket to store the image data. S3 Bucket is a great choice for storing image data due to its scalability, durability, and cost-effectiveness.\nNavigate to the S3 site by typing S3 in the service search bar and select the ‘S3’ service Select Create Bucket to create a new S3 Bucket. In Create Bucket You can name it differently as you like!\nNote: because Bucket name is globally unique, using Bucket name as above will appear the text: Bucket with the same name already exists. Therefore, it is necessary to add a number after it so that your Bucket name matches the policy. The default Bucket type is General purpose Enter the Bucket name Then select ACLs enabled Review the S3 Bucket creation information and click Create Bucket. View the created S3 Bucket. "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/4-initializeproject/",
	"title": "Create Project",
	"tags": [],
	"description": "",
	"content": "Overview\nAfter completing the setup steps, we are ready to configure a project using Laravel to upload files to S3 Bucket. Detailed information about Laravel: Laravel Install Laravel, Composer: Laravel, Composer Main content Create Laravel Configure source code Create Frontend source code "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/5-verifys3connection/",
	"title": "Test",
	"tags": [],
	"description": "",
	"content": "Next, we will test the project to see if the website is working properly.\nTo run the Laravel project, you must open the terminal. Press the key combination Ctrl + ` to quickly open the terminal.\nThen press the command to run php artisan serve\nYou can quickly access the web by Ctrl + left click or copy the link http://127.0.0.1:8000/ and paste it into the browser.\nIf it fails to run, you can cd to s3upload and run the command again. It may not be in your code folder, so it fails.\nAfter accessing the web, you can select the file you want to upload and press Upload. Go to your S3 bucket to check if the image has been uploaded. To view the image, you can access Permissons At Block public access (bucket settings) you edit And uncheck Block all public access and Save changes then confirm Go to Bucket policy select edit then paste and Save changes\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::mybucket1222222111/*\u0026#34;\r}\r]\r} Replace mybucket1222222111 with your Bucket name\nGo back to Object and go to your Bucket click on the uploaded image file Go to Object URL to see the uploaded image file This is the uploaded image "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/6-cleanup/",
	"title": "Cleaning Up Resources",
	"tags": [],
	"description": "",
	"content": "At the end of this workshop, we will clean up all the resources we have created!\nDelete S3 Bucket: Be careful when deleting a bucket, as it will also delete all the objects stored inside. Make sure you have a backup if needed. Locate the S3 Bucket you created.\nSelect the Bucket by clicking on Bucket name and select Delete. If the Bucket contains objects, you can click the Empty button to clean up that object.\nFill in permanently delete and Empty to delete. After deleting the objects will look like this. And go back to select Bucket and Delete the Buckets. Fill in the Bucket name and Delete.\n2. Delete IAM User\nAccess IAM and select the user name you want to delete. Press deactivated Access key Press Delete and confirm deletion. "
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/categories/fashion/",
	"title": "Fashion",
	"tags": [],
	"description": "",
	"content": "Fashion Explore our trendy collection of clothing, accessories, and footwear for all seasons.\nCategories Men\u0026rsquo;s Fashion Women\u0026rsquo;s Fashion Kids\u0026rsquo; Fashion Accessories Footwear Trending Now Summer Collection Casual Wear Formal Attire Sports Wear Designer Bags Stay stylish with our latest fashion collection. New arrivals every week!\n"
},
{
	"uri": "http://localhost:1313/NguyenHuuKhai-Workshop.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]